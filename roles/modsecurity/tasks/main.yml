---
- name: Ensure build dependencies are present.
  community.general.zypper:
    name:
      - autoconf
      - bison
      - flex
      - gcc
      - gcc-c++
      - libcurl-devel
      - libopenssl-1_1-devel
      - libtool
      - libxml2-devel
      - libyajl-devel
      - libyajl2
      - lmdb
      - lmdb-devel
      - lua-macros
      - lua53
      - lua53-devel
      - m4
      - make
      - patch
      - pcre-devel
      - pcre2-devel
      - zlib-devel
    state: present
  become: true

- name: Ensure required directories are present.
  ansible.builtin.file:
    dest: "{{ item.dest }}"
    state: directory
    mode: "0700"
  loop:
    - { dest: "{{ modsecurity_src_directory }}/download" }
    - { dest: "{{ modsecurity_src_directory }}/modsecurity/{{ modsecurity_version }}" }

- name: Ensure source is present.
  ansible.builtin.get_url:
    url: https://github.com/SpiderLabs/ModSecurity/releases/download/v{{ modsecurity_version }}/modsecurity-v{{ modsecurity_version }}.tar.gz
    dest: "{{ modsecurity_src_directory }}/download/modsecurity-v{{ modsecurity_version }}.tar.gz"
    checksum: "{{ modsecurity_checksum }}"
    mode: "0600"

- name: Ensure source is extracted.
  ansible.builtin.unarchive:
    src: "{{ modsecurity_src_directory }}/download/modsecurity-v{{ modsecurity_version }}.tar.gz"
    dest: "{{ modsecurity_src_directory }}/modsecurity/{{ modsecurity_version }}"
    creates: "{{ modsecurity_src_directory }}/modsecurity/{{ modsecurity_version }}/configure"
    remote_src: true
    extra_opts:
      - --strip-components=1
    mode: u=rwX,g=,o=

- name: Ensure patches are applied.
  ansible.posix.patch:
    src: "{{ item }}"
    basedir: "{{ modsecurity_src_directory }}/modsecurity/{{ modsecurity_version }}"
    strip: 1
  with_fileglob: files/modsecurity/{{ modsecurity_version }}/patches/*.patch

- name: Fetch latest configuration hash.
  ansible.builtin.slurp:
    src: "{{ modsecurity_src_directory }}/modsecurity/{{ modsecurity_version }}/.ansible"
  ignore_errors: true
  register: modsecurity_configuration_latest_hash

- name: Check if './configure' must be executed.
  ansible.builtin.set_fact:
    modsecurity_configuration_changed: |
      {{ 'content' not in modsecurity_configuration_latest_hash or
         (modsecurity_configuration | sort | md5) != (modsecurity_configuration_latest_hash['content'] | b64decode) }}

- name: Ensure latest build configuration is applied.
  when: modsecurity_configuration_changed
  block:
    - name: Run 'build.sh'.
      ansible.builtin.command:
        argv: ./build.sh
        chdir: "{{ modsecurity_src_directory }}/modsecurity/{{ modsecurity_version }}"
      tags:
        - skip_ansible_lint
    - name: Run './configure'.
      ansible.builtin.command:
        argv: "{{ ['./configure', prefix] + modsecurity_configuration }}"
        chdir: "{{ modsecurity_src_directory }}/modsecurity/{{ modsecurity_version }}"
      vars:
        prefix: --prefix={{ modsecurity_dist_directory }}
      tags:
        - skip_ansible_lint
    - name: Save current configuration hash.
      ansible.builtin.copy:
        content: "{{ modsecurity_configuration | sort | md5 }}"
        dest: "{{ modsecurity_src_directory }}/modsecurity/{{ modsecurity_version }}/.ansible"
        mode: "0600"

- name: Ensure artifacts are build.
  community.general.make:
    chdir: "{{ modsecurity_src_directory }}/modsecurity/{{ modsecurity_version }}"
    jobs: "{{ (ansible_processor_nproc * 0.75) | round(0, 'floor') | int }}"
  register: modsecurity_make

- name: Ensure artifacts are present.
  # noqa: no-handler
  community.general.make:
    chdir: "{{ modsecurity_src_directory }}/modsecurity/{{ modsecurity_version }}"
    target: install
  when: modsecurity_make.changed
